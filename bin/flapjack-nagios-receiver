#!/usr/bin/env ruby

require 'redis'
require 'json'
$: << File.expand_path(File.join(File.dirname(__FILE__), '..', 'lib'))
require 'flapjack/data/entity_check'

# nagios.cfg contains the following templates for host and service data (modified from the default
# to include hoststate / servicestate, and a fake service 'HOST' for hostperfdata, so that the
# fields match up
# host_perfdata_file_template=[HOSTPERFDATA]\t$TIMET$\t$HOSTNAME$\tHOST\t$HOSTSTATE$\t$HOSTEXECUTIONTIME$\t$HOSTLATENCY$\t$HOSTOUTPUT$\t$HOSTPERFDATA$
# service_perfdata_file_template=[SERVICEPERFDATA]\t$TIMET$\t$HOSTNAME$\t$SERVICEDESC$\t$SERVICESTATE$\t$SERVICEEXECUTIONTIME$\t$SERVICELATENCY$\t$SERVICEOUTPUT$\t$SERVICEPERFDATA$

FLAPJACK_ENV = ENV['FLAPJACK_ENV'] || 'development'
config_file = File.join('etc', 'flapjack_config.yaml')
if File.file?(config_file)
  config = YAML::load(File.open(config_file))
else
  puts "Could not find 'etc/flapjack_config.yaml'"
  exit(false)
end
config_env = config[FLAPJACK_ENV]
puts config_env.inspect
@redis_host     = config_env['nagios_receiver']['redis_host'] || 'localhost'
@redis_port     = config_env['nagios_receiver']['redis_port'] || '6379'
@redis_path     = config_env['nagios_receiver']['redis_path'] || nil
@redis_db       = config_env['nagios_receiver']['redis_db']   || 0

if config_env.nil? || config_env.empty?
  puts "No config data for environment '#{FLAPJACK_ENV}'"
  exit(false)
end

# add lib to the default include path
unless $:.include?(File.dirname(__FILE__) + '/../lib/')
  $: << File.dirname(__FILE__) + '/../lib'
end

def process_input

  if @redis_path
    redis = Redis.new(:db => @redis_db, :path => @redis_path)
  else
    redis = Redis.new(:db => @redis_db, :host => @redis_host, :port => @redis_port)
  end

  begin
    while line = ARGF.readline.split("\t")
      object_type, timestamp, entity, check, state, check_time, check_latency, check_output, check_perfdata = line
      puts "#{object_type}, #{timestamp}, #{entity}, #{check}, #{state}, #{check_output}"
      next unless line.length == 9
      next unless timestamp =~ /^\d+$/
      next unless (object_type == '[HOSTPERFDATA]') or (object_type == '[SERVICEPERFDATA]')
      event = {
        'entity'    => entity,
        'check'     => check,
        'type'      => 'service',
        'state'     => state,
        'summary'   => check_output,
        'timestamp' => timestamp,
      }.to_json
      redis.rpush 'events', event
    end
  rescue Redis::CannotConnectError
    puts "Error, unable to to connect to the redis server (#{$!})"
  end
end

def main
  while true
    process_input
    sleep 10
  end
end

main

