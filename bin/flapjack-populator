#!/usr/bin/env ruby

require 'yajl'
require 'redis'
require 'optparse'
require 'ostruct'

# add lib to the default include path
unless $:.include?(File.dirname(__FILE__) + '/../lib/')
  $: << File.dirname(__FILE__) + '/../lib'
end

require 'flapjack/data/contact'
require 'flapjack/data/entity'

options = OpenStruct.new
options.config    = File.join('etc', 'flapjack_config.yaml')
options.daemonize = nil

command = ARGV.shift

banner  = "Usage: flapjack-populator command [options]\n"
banner += "\n"
banner += "  commands:\n"
banner += "    - import-entities\n"
banner += "    - import-contacts\n"
banner += "    - purge-events (purge queued monitoring events)\n"

OptionParser.new do |opts|
  opts.banner = "Usage: flapjack-populator command [options]"

  opts.on("-c", "--config [PATH]", String, "PATH to the config file to use") do |c|
    options.config = c
  end

  opts.on("-f", "--from [FILE]", String, "path to the FILE to import") do |f|
    options.from = f
  end

end.parse!(ARGV)

FLAPJACK_ENV = ENV['FLAPJACK_ENV'] || 'development'

config_env = Flapjack::Configuration.new.load(options.config)

if options.from
  filename = options.from
  file     = File.new(filename)
end

parser   = Yajl::Parser.new

@redis_host = config_env['redis']['host']
@redis_port = config_env['redis']['port']
@redis_path = config_env['redis']['path']
@redis_db   = config_env['redis']['db']

def get_redis_connection
  if @redis_path
    redis = Redis.new(:db => @redis_db, :path => @redis_path)
  else
    redis = Redis.new(:db => @redis_db, :host => @redis_host, :port => @redis_port)
  end
  redis
end

case command
when "import-contacts"
  contacts = parser.parse(file)

  @persistence = get_redis_connection
  @persistence.multi do |r|
    contacts.each do |contact|
      unless contact['id']
        puts "Contact not imported as it has no id: " + contact.inspect
        next
      end
      Flapjack::Data::Contact.add(contact, :redis => r)
    end
  end

when "import-entities"
  entities = parser.parse(file)

  @persistence = get_redis_connection
  @persistence.multi do |r|
    entities.each do |entity|
      unless entity['id']
        puts "Entity not imported as it has no id: " + entity.inspect
        next
      end
      Flapjack::Data::Entity.add(entity, :redis => r)
    end
  end

when "purge-events"
  @persistence = get_redis_connection
  Flapjack::Data.Event.purge_all(:redis => @persistence)

else
  puts "you need to give me something to do, eg a command like 'import-entities' or 'import-clients' etc"
  raise ArgumentError
end

