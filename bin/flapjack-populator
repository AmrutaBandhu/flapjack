#!/usr/bin/env ruby

require 'yajl'
require 'redis'
require 'optparse'
require 'ostruct'

# add lib to the default include path
unless $:.include?(File.dirname(__FILE__) + '/../lib/')
  $: << File.dirname(__FILE__) + '/../lib'
end

require 'flapjack/configuration'
require 'flapjack/data/contact'
require 'flapjack/data/entity'

options = OpenStruct.new
options.config    = File.join('etc', 'flapjack_config.yaml')
options.daemonize = nil

command = ARGV.shift

banner  = "Usage: flapjack-populator command [options]\n"
banner += "\n"
banner += "  commands:\n"
banner += "    - import-entities\n"
banner += "    - import-contacts\n"
banner += "    - purge-events (purge queued monitoring events)\n"

OptionParser.new do |opts|
  opts.banner = "Usage: flapjack-populator command [options]"

  opts.on("-c", "--config [PATH]", String, "PATH to the config file to use") do |c|
    options.config = c
  end

  opts.on("-f", "--from [FILE]", String, "path to the FILE to import") do |f|
    options.from = f
  end

end.parse!(ARGV)

FLAPJACK_ENV = ENV['FLAPJACK_ENV'] || 'development'

config_env = Flapjack::Configuration.new.load(options.config)

if options.from
  filename = options.from
  file     = File.new(filename)
end

parser   = Yajl::Parser.new

def get_redis_connection(cfg)
  opts = cfg['path'] ? {:path => cfg['path'])} :
                       {:host => cfg['host'], :port => cfg['port']}
  Redis.new(opts.merge(:db => cfg['db']))
end

case command
when "import-contacts"
  contacts = parser.parse(file)

  if contacts && contacts.is_a?(Enumerable) && contacts.any? {|e| !e['id'].nil?}
    @persistence = get_redis_connection(config_env['redis'])
    @persistence.multi do |r|
      contacts.each do |contact|
        unless contact['id']
          puts "Contact not imported as it has no id: " + contact.inspect
          next
        end
        Flapjack::Data::Contact.add(contact, :redis => r)
      end
    end
    @persistence.quit
  end

when "import-entities"
  entities = parser.parse(file)

  if entities && entities.is_a?(Enumerable) && entities.any? {|e| !e['id'].nil?}
    @persistence = get_redis_connection(config_env['redis'])
    @persistence.multi do |r|
      entities.each do |entity|
        unless entity['id']
          puts "Entity not imported as it has no id: " + entity.inspect
          next
        end
        Flapjack::Data::Entity.add(entity, :redis => r)
      end
    end
    @persistence.quit
  end

when "purge-events"
  @persistence = get_redis_connection(config_env['redis'])
  Flapjack::Data.Event.purge_all(:redis => @persistence)
  @persistence.quit

else
  puts "you need to give me something to do, eg a command like 'import-entities' or 'import-clients' etc"
  raise ArgumentError
end

