#!/usr/bin/env ruby

require 'yajl'
require 'redis'
require 'yaml'

command = ARGV[0]
options = ARGV[1..-1]
options = Hash[options.map {|o| o.scan(/--(.+)=(.+)/).flatten }]

raise ArgumentError, "required option 'from' not supplied" unless options["from"]

filename = options["from"]
file     = File.new(filename)
parser   = Yajl::Parser.new

# config file reading stuff ...
# FIXME: move this into somewhere reusable
FLAPJACK_ENV = ENV['FLAPJACK_ENV'] || 'development'
config_file = File.join('etc', 'flapjack_config.yaml')
if File.file?(config_file)
  config = YAML::load(File.open(config_file))
else
  puts "Could not find 'etc/flapjack_config.yaml'"
  exit(false)
end
config_env = config[FLAPJACK_ENV]
@redis_host = config_env['redis']['host'] || 'localhost'
@redis_port = config_env['redis']['port'] || '6379'
@redis_path = config_env['redis']['path'] || nil
@redis_db   = config_env['redis']['db']   || 0

if config_env.nil? || config_env.empty?
    puts "No config data for environment '#{FLAPJACK_ENV}'"
      exit(false)
end

# add lib to the default include path
unless $:.include?(File.dirname(__FILE__) + '/../lib/')
  $: << File.dirname(__FILE__) + '/../lib'
end

def get_redis_connection
  if @redis_path
    redis = Redis.new(:db => @redis_db, :path => @redis_path)
  else
    redis = Redis.new(:db => @redis_db, :host => @redis_host, :port => @redis_port)
  end
  redis
end

case command
when "deploy"

  @queue = Beanstalk::Connection.new('localhost:11300', 'checks')

  batch    = parser.parse(file)
  batch_id = batch["batch"]["id"]

  batch["checks"].each do |check|
    job = check.merge({"batch_id" => batch_id})
    @queue.yput(job)
  end

  puts "Deployed batch #{batch_id}"

when "import-contacts"
  @persistence = get_redis_connection
  contacts = parser.parse(file)
  contacts.each {|contact|
    if not contact['id']
      puts "Contact not imported as it has no id: " + contact.inspect
      next
    end
    @persistence.multi
    @persistence.del("contact:#{contact['id']}")
    @persistence.del("contact_media:#{contact['id']}")
    @persistence.hset("contact:#{contact['id']}", 'first_name', contact['first_name'])
    @persistence.hset("contact:#{contact['id']}", 'last_name',  contact['last_name'])
    @persistence.hset("contact:#{contact['id']}", 'email',      contact['email'])
    contact['media'].each_pair {|medium, address|
      @persistence.hset("contact_media:#{contact['id']}", medium, address)
    }
    @persistence.exec
  }

when "import-entities"
  @persistence = get_redis_connection
  entities = parser.parse(file)
  entities.each {|entity|
    if not entity['id']
      puts "Entity not imported as it has no id: " + entity.inspect
      next
    end
    @persistence.multi
    existing_name = @persistence.hget("entity:#{entity['id']}", 'name')
    @persistence.del("entity_id:#{existing_name}") unless existing_name == entity['name']
    @persistence.set("entity_id:#{entity['name']}", entity['id'])
    @persistence.hset("entity:#{entity['id']}", 'name', entity['name'])

    @persistence.del("contacts_for:#{entity['id']}")
    entity['contacts'].each {|contact|
      @persistence.sadd("contacts_for:#{entity['id']}", contact)
    }
    @persistence.exec

  }
else
  puts "you need to give me something to do, eg a command like 'import-entities' or 'import-clients' etc"
  raise ArgumentError
end

