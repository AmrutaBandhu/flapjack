#!/usr/bin/env ruby

FLAPJACK_ENV = ENV['FLAPJACK_ENV'] || 'development'
require 'bundler'
Bundler.require(:default, FLAPJACK_ENV.to_sym)

$: << File.dirname(__FILE__) + '/../lib' unless $:.include?(File.dirname(__FILE__) + '/../lib/')

require 'flapjack/cli/executive'
require 'flapjack/applications/executive'
require 'flapjack/patches'

# setup 
@options = Flapjack::Executive::Options.parse(ARGV)

log = Log4r::Logger.new("executive")
log.add(Log4r::SyslogOutputter.new("executive"))

app = Flapjack::Executive::Application.run(:log => log, 
                                          :executives => {},
                                          :filters => [],
                                          :queue_backend => {:type => :beanstalkd},
                                          :persistence => {:type => :data_mapper,
                                                           :uri => "sqlite3:///tmp/flapjack.db"})

mockapp = Flapjack::Executive::Application.run(:log => log,
                                              :executives => {},
                                              :queue_backend => {:type => :mockbackend,
                                                                 :basedir => File.join(File.dirname(__FILE__), '..', 'spec', 'transports')},
                                              :persistence => {:type => :mockbackend,
                                                               :basedir => File.join(File.dirname(__FILE__), '..', 'spec', 'persistence')})

# populate 
require 'beanstalk-client'
beanstalk = Beanstalk::Pool.new(["localhost:11300"], 'results')

puts "Writing 1000 passing checks onto work queue."
2000.times do 
  result = {:output => "some output", :check_id => 1, :retval => 0}
  beanstalk.yput(result)
end

# benchmark
require 'benchmark' 

Benchmark.bm(30) do |b|
  b.report("beanstalkd + datamapper:") do
    1000.times {app.process_result}
  end
  b.report("mock + mock:") do
    1000.times {mockapp.process_result}
  end
end
