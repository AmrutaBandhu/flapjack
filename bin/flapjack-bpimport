#!/usr/bin/env ruby

require 'optparse'
require 'ostruct'
require 'yajl/json_gem'
require 'redis'

# add lib to the default include path
unless $:.include?(File.dirname(__FILE__) + '/../lib/')
  $: << File.dirname(__FILE__) + '/../lib'
end

require 'flapjack/data/contact'
require 'flapjack/data/entity'

options = OpenStruct.new
options.config = File.join('etc', 'flapjack_config.yaml')

kevlar_url = ARGV.shift

banner  = "Usage: flapjack-bpimport KEVLAR [options]\n"
banner += "\n"
banner += "  KEVLAR: root URL of a kevlar server\n"

OptionParser.new {|opts|
  opts.banner = "Usage: flapjack-bpimport URL [options]"

  opts.on("-c", "--config [PATH]", String, "PATH to the config file to use") do |c|
    options.config = c
  end

  opts.on("-u", "--username [USERNAME]", String, "USERNAME to send ") do |u|
    options.username = u
  end

  opts.on("-c", "--password [PASSWORD]", String, "PATH to the config file to use") do |p|
    options.password = p
  end

}.parse!(ARGV)

FLAPJACK_ENV = ENV['FLAPJACK_ENV'] || 'development'

config_env = Flapjack::Configuration.new.load(options.config)

module Flapjack
  module KevlarClient
    include HTTParty
    format :json

    class << self

      def entities
        from_json( get("/entities") )
      end

      def contacts
        from_json( get("/contacts") )
      end

    private

      def from_json(response)
        return unless response && response.body
        JSON.parse(response.body)
      end

    end
  end

end


@redis_host = config_env['redis']['host']
@redis_port = config_env['redis']['port']
@redis_path = config_env['redis']['path']
@redis_db   = config_env['redis']['db']

def get_redis_connection
  if @redis_path
    redis = Redis.new(:db => @redis_db, :path => @redis_path)
  else
    redis = Redis.new(:db => @redis_db, :host => @redis_host, :port => @redis_port)
  end
  redis
end

begin
  Flapjack::KevlarClient.base_uri(kevlar_url)
  if options.username && (options.username.length > 0) &&
     options.password && (options.password.length > 0)
    Flapjack::KevlarClient.basic_auth(options.username, options.password)
  end
  entities = Flapjack::KevlarClient.entities
  contacts = Flapjack::KevlarClient.contacts
rescue Exception => e
  # TODO error and exit
end


redis = get_redis_connection

redis.multi do |r|
  entities.each do |entity|
    unless entity['id']
      puts "Entity not imported as it has no id: " + entity.inspect
      next
    end
    Flapjack::Data::Entity.add(entity, :redis => r)
  end

  contacts.each do |contact|
    unless contact['id']
      puts "Contact not imported as it has no id: " + contact.inspect
      next
    end
    Flapjack::Data::Contact.add(contact, :redis => r)
  end
end

redis.quit